-- create gen_invite function
create OR replace function public.gen_code() returns text AS $$
declare
  characters TEXT := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  bytes BYTEA := extensions.gen_random_bytes(6);
  l INT := length(characters);
  i INT := 0;
  output TEXT := '';
BEGIN
  WHILE i < 6 LOOP
    output := output || substr(characters, get_byte(bytes, i) % l + 1, 1);
    i := i + 1;
  END LOOP;
  RETURN output;
END;
$$ LANGUAGE plpgsql security definer;

create OR replace function public.handle_new_user() returns trigger
as $$
declare
  l_invite_code text;
BEGIN
  if new.raw_user_meta_data->>'role'='supervisor'
  then
    l_invite_code := (select public.gen_code());
  else
    l_invite_code := (select invite_code from auth.users where id = (new.raw_user_meta_data->>'parent_id')::uuid);
  end if;

  UPDATE auth.users
    SET
      user_type   = new.raw_user_meta_data->>'role',
      name        = new.raw_user_meta_data->>'name',
      invite_code = l_invite_code,
      raw_user_meta_data = new.raw_user_meta_data || ('{"invite_code":' || '"' || l_invite_code || '"' || '}' )::jsonb || ('{"interval":' || '"' || new.interval || '"' || '}' )::jsonb,
      last_checkin = NOW()
  WHERE id = new.id;
  return new;
END;
$$ language plpgsql security definer;

create OR replace function public.update_last_checkin(uid uuid) returns boolean
as $$
BEGIN
  UPDATE auth.users
    SET
      last_checkin = NOW()
  WHERE id = uid;
  return true;
END;
$$ language plpgsql security definer;

create OR replace function public.update_interval(uid uuid, new_interval time) returns boolean
as $$
BEGIN
  UPDATE auth.users
    SET
      interval = new_interval,
      raw_user_meta_data = raw_user_meta_data || jsonb_build_object('interval', new_interval)
  WHERE id = uid;
  return true;
END;
$$ language plpgsql security definer;


DROP FUNCTION public.get_supervised(text);
-- get child users function for RPC
create or replace function public.get_supervised(l_invite_code text)
  RETURNS TABLE(tid uuid, tname text, tlast_checkin timestamptz, "tinterval" time, difference interval)
as $$
BEGIN
    return query select id, name, last_checkin, "interval", (now() - last_checkin) as difference from auth.users where (invite_code = l_invite_code AND user_type='supervised');
END;
$$ language plpgsql security definer;